Head first Learning principle 
1. Make visuals 
2. Use a conversational and personalized style
3. Get the learner to think more deepls
4. get - and keep the readers attention
5. touch thier emotions

what YOU can do to bend your brain into submission
1. Slow down. The more you understand, the less you have to memorize
2. Do the excercises, Write notes
3. Read the there are No dumb question
4. Make this the last think you read before bed. or at least the last challenging thing
5. Drink water. Lots of it.
6. Talk about it. Out loud.
7. Listen to your brain.
8. Feel something!
9. Create something!
10 Get Sleep.

Chapter 1 - A quick dip into Javascript 

Basics 
1. Each statement ends in a semicolon
2. A single line comment begins with two forward slashes. Comments are just notes to you or other developers about the code.They aren’t executed.
3. Whitespace doesnt matter (almost everywhere).
4.  Don’t use quotes around the boolean values true and false.
5. Variables don’t have to be given a value when they are declared:
	eg : var width;
6.  JavaScript, unlike HTML markup, is case sensitive, meaning upper- and lowercase matters.The variable counter is different from the
	eg: variable Counter.


Chapter 2 - Going futher

1. Pseudocode gives us the logic or apprximation of what your real code should do. 
2. Before writing an code always try to write the flow chart first 
3. There are two types of boolean operators: 
   i) comparison operators - >, <, >=, <=, ==, !=.
   ii).logical operators. - && (and), ||(or) 
   When used in an expression, boolean operators result in a true or false value.
4. Math.random() - helps us in creating random value b/w 0 and 1 
5. Math.floor() - helps us in round the decimal value to nearest integer
5. Prompt - is used to get input from use to enter value
6. alert - is used to show message to user 


Chapter 3  - Functions

1. Using functions we can write code that can be applied to all sorts of different circumstances. To be more clear using functions we can implement the code which is resuable, reused, managable, abstracted.
2. the code inside the function is excuted when function is called.
3.  Functions are a good way to organize your code and create reusable chunks of code
4. eg of function 
    	function bark(name, weight) {
 	if (weight > 20) {
 	console.log(name + " says WOOF WOOF");
 	} else {
 	console.log(name + " says woof woof");
 	 }
	}

	bark("rover", 23);  -- Function invokae
5. Wired Function => Are function when we defined function with more parameter/less parameter/ without passing argument.
   eg: *more parameter* 
        function makeTea(cups, tea) {
 	console.log("Brewing " + cups + " cups of " + tea);
 	}
 	makeTea(3);
 o/p: Brewing 3 cups of undefined

    eg2: less parameter 
    	function makeTea(cups, tea) {
	 console.log("Brewing " + cups + " cups of " + tea);
 	}
 	makeTea(3, "Earl Grey", "hey ma!", 42);
 o/p: Brewing 3 cups of Earl Grey

    eg3: No parameter 
         function barkAtTheMoon() {
 	console.log("Woooooooooooooo!");
 	}
 	barkAtTheMoon();

 o/p: Woooooooooooooo!

6. Tracing flow of function/Code : This explains the complete flow through of a function starting from variable assigining, calling the function and till desired output
7. scope -  If the variable is declared outside a function, then you can use it anywhere in your code. If a variable is declared inside a function, then you can use it only     	     within that function.
8. Two types of scope - Global & Local 
   If a variable is declared outside a function, it’s GLOBAL. If it’s declared inside a function, it’s LOCAL.
   eg : var avatar;  -- global scope
	function speed(value) {
    	var i = 0;  -- local scope
    	var speedlimit; -- local scope
    	if(value < 60) {
        console.log('within limit');
    	 }
	}
   Global scope : avatar 
   local scope : speedlimit, i

9. If you forget to declare a variable before using it, the variable will always be global (even if the first time you use it isin a function).
10. JavaScript doesn’t care if your functions are declared before or after you use them.
11. JavaScript starts executing the from the top to the bottom of your file. But, the truth is JavaScript actually makes two passes over your page: in the first pass it reads all the function definitions, and in the second it begins executing your code. So, that allows you to place functions anywhere in your file.

Chapter 4 - Arrays 

1. JavaScript arrays are used to store multiple values in a single variable. Arrays are a data structure for ordered data.
	eg: var scores = [60, 50, 60, 58, 54, 54, 58, 50, 52, 54];
2. Accessing an element in array 
     var <name> = <arrayName>[2]; - This evaluates to the value of the flavors array at index 2, which is then assigned to the variable name.
3.   Arrays use a zero-based index, where the first item is at index zero.You can access any item using its index.
     For example, use myArray[1] to access item one (the second item in the array)
4. Arrays also provide us the feature to to know how big is our array 
     var <name> = <arrayName>.length; - gives us the lenght of the array 
   Note: array length is calculated from 0.
5. for loop can be used instead of while loop
6.  A sparse array is just an array that has values at only a few indices and no values in between. You can create a sparse array easily, like this:
    eg:	var sparseArray = [ ];
	sparseArray[0] = true;
 	spraseArray[100] = true;
7. Use the array literal notation to create a new array. 
    eg: var <arrayname> = []
8. Sparse arrays occur when there are undefined items in the middle of an array.
9. You can add a new value to an array using push.

Chapter 5 - Objectville

1. An Object is nothing but collection of properties
2. To access a property, use dot notation: the name of the variable containing the object, then a period, then the name of the property.
3. Add new properties to object. 
    var <objectname>.<propertyname> = "value"/number/function/boolean
4. Delete operator is used to delete the property in a object
    delete <objectname>.<propertyname>;
5. When you pass an object to a function, the function gets a copy of the reference to the object, not a copy of the object itself. So, if you change the value of one of the object’s properties, it changes the value in the original object. 
6. Object properties can contain functions. When a function is in an object, we call it a method.
7. call a method : using the dot notation: the object name, a period, and the property name of the method, followed by parentheses.
     <objectname>.property/method();
8. A method is just like a function except that it is in an object
9. To access an object’s properties in an object’s method, you must use dot notation, with this in place of the object’s name
10.  Objects encapsulate, or hide, the complexity of the state and behavior in that object.

Chapter 6 - Getting to know the DOM 

1. Dom (Document Object Model) is the browsers internal representation of the web page.
2. The DOM is created by browser and it loads and parses the HTML
3. We get access to DPM in Javascript code with the document object.
4. The document object has properties and methods you can use to access and modify the DOM 
5. document.getElementById is the method used to get element using id
6. The document.getElementById method returns an element object that represents an element in your page. 
7. The innerHTML - holds the content inside the element also the nested html content
8. Modify the content of an element by changing the value of its innerHTML property.
9. getAttribute -  get the value of an element’s attributes
10. setAttribute - set the value of an element’s attributes
11. If we put your code in a <script> element in the <head> of your page, you need to make sure we don’t try to modify the DOM until the page is fully loaded.
12.A callback works like this: give a function to the object that knows about the event. 

Chapter 7 - Serious Types 

1.Two types in JAvascript - Primitive & objects
  1.1 The primitives are: numbers, strings, booleans, null and undefined. Everything else is an object.
  1.2 The elements other than primitive are objects
2. Undefined mmeanst that a variable hasnt yet been intialized to a value
3. null means "no object"
4. NaN stands for "Not a number". the type of NaN is a number. NaN is a number that cannot be respresented in Javascript
5. Nan Never equals any other value, including itself.
6. Two types of equal operator equality operator(==) and Strict equality operator(===)
7. Equality operator (==) -  If two operands have different types, the equality operator (==) will try to convert one of the operands into another type before testing for equality.  
8. Strict equality operator(===) - If two operands have different types, the strict equality operator (===) returns false.
9.  Type conversion is also used with other operators, like the arithmetic operators and string concatenation
10. JavaScript has five falsey values: undefined, null, 0, “” (the empty string) and false. All other values are truthy.
11. The string has many methods that are usefulfor string manipulation. 
12. Length property : Which holds thenumber of characters in the string.
13. indexOf - returns the index of the first occurence of that argument in the string
14. substring Method - extract and return the string contained within them
15. split method - takes of the character that acts as a delimiter and braks the string into parts based on delimiter
16. tolowercase - converts the string letters into lowercase 
17. lasIndexOf -  returns the index of the last occurence of that argument in the string
18. match - Searches for matches in a string using regular expressions.
19. trim() - Removes white space from the arround the string.
20. slice - returns a new string that has part of the original string removed


Chapter 8 - Building an App
1. Always try to orgranize your code using object/array/etc.
2. Make sure each property has one primary resposnbility
3. Always try to print msg in a genral format. 
4. Arrays have an indexOf method that is similar to the string indexOf method. The array indexOf method takes a value, and returns the index of that value if it exists in the array, or -1 if it does not.
5. Alwasy break your problem into simpler steps and run code after you does each part and check if the output is correct
6.  Quality assurance (QA) is an important part of developing your code. QA requires testing not just valid input, but invalid input as well.

Chapter - 10 Functions
1. Function can be declared in two types 
   i) function declaration 
   ii) function expression 
2. A function reference is a value that refers to a function.
3. Function declarations are handled before your code is evaluated.
   Function expressions are evaluated at runtime with the rest of your code.
4. When the browser evaluates a function declaration, it creates a function as well as a variable with the same name as the function, and stores the function reference in the variable.
5. When the browser evaluates a function expression, it creates a function, and it’s up to you what to do with the function reference.

Chapter 11 Serious function 
1. An anonymous function is a function that has no name
2. Anonyms functions can make your code more concise 
3. Function declaration is defined before the rest of the code is evaluated and Function expression is evaluated at runtime with rest of your code and so in not defined until the statement in which it appears is evaluated
4. We can pass function expression to another function or return a function expression from a function 
5. Function expression evaluates to a function reference so you can use a function expression anywhere we use a function reference 
6. Nested function are function defined inside another function, Nested function has local scope just like other local variabes.
7. Lexical Scope means that we can determine the scope of a variable by reading a code 
8. To blind the value of a variable in aa= nested function use the value thats defined in the closet enclosing function. If no value is found then look into global scope
9. Closures are a function along with a referencing environment. A closure captures the value of variables in scope at the time the closure is created.
10. Free variables in the body of a function are variables that are not bound in the body of that function.
11. Closures are often used to capture state for event handlers. 
